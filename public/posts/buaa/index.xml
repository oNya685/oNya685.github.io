<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>北京航空航天大学 on oNya&#39;s Blog</title>
    <link>https://oNya685.github.io/posts/buaa/</link>
    <description>Recent content in 北京航空航天大学 on oNya&#39;s Blog</description>
    <generator>Hugo -- 0.146.5</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 18 Apr 2025 10:43:00 +0000</lastBuildDate>
    <atom:link href="https://oNya685.github.io/posts/buaa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[BUAA-OO] Unit 2 总结</title>
      <link>https://oNya685.github.io/posts/buaa/oo/unit-2/summary/</link>
      <pubDate>Fri, 18 Apr 2025 10:43:00 +0000</pubDate>
      <guid>https://oNya685.github.io/posts/buaa/oo/unit-2/summary/</guid>
      <description>第二单元博客作业</description>
      <content:encoded><![CDATA[<blockquote>
<p>几千字的流水账真的会有人从头看到尾吗（？
不按作业的要求顺序来了，有意思的放最前，重要的放其次，其余的往后排。</p></blockquote>
<h1 id="我们真的需要一台电梯么">我们真的需要一台电梯么？</h1>
<p>首先，回顾一下作业要求：我们要<strong>模拟</strong>六台电梯的运行、调度，和其开关门、移动、对乘客的接、送行为，其中大部分行为需要等待一定的<strong>现实时间</strong>。而评测要求我们在每一<strong>状态转移完成</strong>时输出一条信息，以供测评<strong>评测机中模拟的电梯状态机</strong>是否在<strong>符合正确性规范</strong>的前提下<strong>完成功能</strong>，并<strong>评测性能</strong>。</p>
<h2 id="为什么是状态机">为什么是状态机</h2>
<blockquote>
<p><strong>Everything is a state machine.</strong></p></blockquote>
<p>经常上OS的同学都知道，状态机是一种表示可数个（我想表达的意思是，可以依据规律枚举、列举出，即使有无限种）状态以及在这些状态之间的转移和动作等行为的数学模型。</p>
<p>我们看该单元的电梯系统的架构设计：绝大部分同学（不如说难道还有用其他架构的吗）采取的是这样一种“<strong>三段式架构</strong>”：</p>
$$输入线程 \rightarrow 请求队列 \rightarrow 分配器线程 \rightarrow 等待队列 \rightarrow 电梯线程$$<p>当然，根据大家设计的不同，可能还有其他的共享对象或者其他的箭头关系（主要取决于应对电梯踢人<code>OUT-F</code>和接受临时调度、Update等奇葩请求的设计）。</p>
<p>而电梯是如何决策其状态转移的呢？电梯有如下状态等：当前楼层，是否开门，等待（下称pending）队列，电梯内乘客队列（下称current）。在第一次作业我们就实现了这样一个状态机：采用ALS, LOOK, 或者其他的什么算法。我采用的是出于优先级考虑的，在<strong>高覆盖率</strong>的同时<strong>降低加权平均等待时间</strong>的改进的LOOK算法。</p>
<h2 id="executions的引入"><code>executions</code>的引入</h2>
<p>那么，这一状态机的<strong>输入</strong>是什么？</p>
<p>回顾我们的架构设计，理所当然的，我们会说：输入当然是分配器分配给该电梯的等待队列，吗？</p>
<p>事实上，其决策并<strong>不依赖输入</strong>，换言之，并不是只有有新的请求时电梯才会动的。即使没有请求，电梯也会把自己唤醒，逐步更新自己的状态，直到回归pending和current都变为空的状态。</p>
<p>也就是说，<strong>在任一时刻，若假定该状态机不再会有新的输入（不再分配新的请求），那我们就能推演出该状态机的后续所有行为。</strong>
所以，在后文中，我们暂且规定，称“状态机”为这种没有输入的，自动决策状态转移的状态机。
有没有很像上学期计组做的那个CPU，把机器码记录在文件中加载出来，就能自动执行状态转移？如果把CPU和记录机器码的存储设备框在一起，而不认为机器码是一种输入。把机器码比作pending和current中的数据，和这一单元的电梯是不是很像？</p>
<p>那我们还该如何定义“分配新请求”这种行为呢？很简单，每次分配了新请求，或者告诉电梯要进行SCHE或UPDATE时，我们可以重新计算一遍该电梯从当前状态作所有决策，直到回归空闲状态这一区间中，<strong>所有的状态转移</strong>，并将其更新给电梯线程，电梯线程依次执行即可。</p>
<p>这里，我们引入一个队列 <code>LinkedList&lt;Executeable&gt; executions</code>。用以存储当前电梯所有的状态转移行为，依次执行完就可以抵达名为空闲的终点。</p>
<blockquote>
<p>Interface Executeable，要求实现方法execute(Elevator elevator);  执行时实现状态转移，更新电梯的当前状态</p></blockquote>
<h2 id="解构一台电梯">解构一台电梯</h2>
<p>我们实现了对电梯这一对象的逐步<strong>解构</strong>：现在你还可以坚持称电梯线程在<strong>模拟一台电梯</strong>，实际上它在做的事情只有：<strong>计算executions，execute执行，或者当时间条件不满足时await()</strong>。</p>
<p>下述是对该电梯完全解构的最后一步：把计算executions的工作交给分配器</p>
<p>为什么要这么做？这么做有什么好处？我们考虑分配器的如下分配策略：</p>
<ul>
<li>分配器现在需要<strong>分配某乘客请求</strong>给六台电梯中的任一台，如果可以的话，它希望知道<strong>分配给具体哪一台电梯</strong>能获得最优性能。（当然，不可以的话，随机挑一台塞进去也不是不能跑）</li>
<li>既然对分配器想要分配的这一时刻来说，每一台电梯的接下来的所有行为都是已知的，那么每一台电梯接下来的行为可以用以计算其成本。</li>
<li>那么，分配器想知道分配给哪一台电梯能让总成本最低，就会<strong>依次尝试把乘客请求分配给其中某一台电梯</strong>的情况，并希望知道其总成本：这样，<strong>选出总成本最低的一种情况</strong>，不就是局部的、已知的最优策略了么。相当于在若干条时间线，选了最完美的一条。</li>
<li>但是，怎么知道每一台电梯接下来的行为，甚至是，每一台电梯在接受了当前乘客请求的这一IF线下，接下来的行为呢？我们刚才已经讨论过了，<strong>既然是状态机，那么必然是可以计算的</strong>。</li>
<li>把电梯线程叫醒帮自己计算看上去不太现实（事实上也不太现实），那就自己计算吧，把六个状态机的状态拷贝一份，再创造六个接受了当前乘客分配的IF线状态机，选出最好的一条IF线，并拿这个IF线状态机替换掉真正的状态机，狸猫换太子，就实现了最优分配策略。</li>
<li>那，算都算完了，电梯线程偷个懒不算了，拿着分配器算好的executions，<strong>到时间就执行并且输出</strong>就好了。</li>
</ul>
<h2 id="影子电梯但是只有影子电梯">影子电梯：但是只有影子电梯</h2>
<p>至此，这一臃肿的、模拟真实电梯运行的线程的工作，只剩下：维护一个状态已知、接下来所有状态转移已知的状态机，到了时间就给状态机<strong>执行一步状态转移并输出</strong>，没到时间就回去等着。</p>
<blockquote>
<p>那么，电梯还存在吗？或许游离于分配器的心中，或许藏匿于状态机的状态里，又或许<strong>闪烁在评测机的眼中</strong>，反正不可能说它存在于电梯线程的模拟中了，这么说电梯线程也不能答应的，它只是拿着一串executions，到时间就输出出来而已，连execute都是封装好的。所以我称这样的“电梯线程”为<code>Class Printer extends Thread</code>，它就是一台到时间就自动打印的打印机而已。</p></blockquote>
<blockquote>
<p>按道理来说，贴代码是没人有心思看的，自己的代码自己迭代时都懒得读，但是这是这个线程所剩下的全部内容了，还是读一下吧？
为可读性优化和简化了部分，所以算伪代码。</p></blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">run</span>() {  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">long</span> lastTime <span style="color:#f92672">=</span> System.<span style="color:#a6e22e">currentTimeMillis</span>();  
</span></span><span style="display:flex;"><span>    lock.<span style="color:#a6e22e">lock</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 为方便读，这里省掉了await的try-catch包装块。</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span> (<span style="color:#66d9ef">true</span>) {  
</span></span><span style="display:flex;"><span>		ExecuteAble execution <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// 瞬间的行为，循环依次完成。</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">while</span> (<span style="color:#f92672">!</span>executions.<span style="color:#a6e22e">isEmpty</span>()) {  
</span></span><span style="display:flex;"><span>			execution <span style="color:#f92672">=</span> executions.<span style="color:#a6e22e">getFirst</span>();  
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> (needTimeToExecute(execution)) {
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			lastTime <span style="color:#f92672">=</span> executeAndUpdate(execution, lastTime);  
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// 空闲状态，尝试结束或等待新任务的分配。</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (executions.<span style="color:#a6e22e">isEmpty</span>()) {  
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> (end) { <span style="color:#66d9ef">break</span>; }  
</span></span><span style="display:flex;"><span>			MainProcess.<span style="color:#a6e22e">signalDispatcher</span>();  
</span></span><span style="display:flex;"><span>			printable.<span style="color:#a6e22e">await</span>();  
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// 非瞬间行为，判断是否满足执行条件，失败则等待。</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">long</span> timeToWait <span style="color:#f92672">=</span> lastTime  
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">+</span> needTimeMap.<span style="color:#a6e22e">get</span>(execution)  
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">-</span> System.<span style="color:#a6e22e">currentTimeMillis</span>();  
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (timeToWait <span style="color:#f92672">&lt;=</span> 0) {
</span></span><span style="display:flex;"><span>			lastTime <span style="color:#f92672">=</span> executeAndUpdate(execution, lastTime);  
</span></span><span style="display:flex;"><span>		} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>			printable.<span style="color:#a6e22e">await</span>(timeToWait, TimeUnit.<span style="color:#a6e22e">MILLISECONDS</span>);  
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>    lock.<span style="color:#a6e22e">unlock</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>于是，我们实现了所谓<strong>影子电梯</strong>，证明了影子电梯的可行性，但是全部都是影子电梯。与其说分配器是通过影子电梯计算出分配给具体哪一台真正的电梯，不如说分配器是<strong>拿一台更新后的影子电梯换掉了原来的影子电梯</strong>。</p>
<h1 id="既然影子电梯可行如何适应性能指标">既然影子电梯可行，如何适应性能指标？</h1>
<p>现在谈谈该调度策略是如何权衡总时间、加权平均时间和电量的：</p>
<ol>
<li>首先，我们要尽量降低<strong>总时间$T_{run}$</strong>：这一性能指标显然比另外两个重要的多，如果为追求低功耗而$T_{run}$过大，我们甚至会被判断为效率太低而<strong>超时</strong>，而平均分配、随机分配等方法，也都是在<strong>放弃对于加权平均时间和功耗的考量</strong>下，追求$T_{run}$的解法。</li>
</ol>
<p>但是，$T_{run}$有两个特性：</p>
<ul>
<li>一是对于所有电梯来说，<strong>只有最大的$T_{run}$是有意义的</strong>，当其中一台电梯的总时间很长，而给其他某台电梯分配了请求后总时间依然不比最长的总时间长，那么$T_{run}$是没有变化的，此时追求降低$T_{run}$是一种没太大意义的行为。</li>
<li>二是对于当前$T_{run}$最大的电梯来说，<strong>捎带请求是一种以牺牲少量$T_{run}$换取极大加权平均时间和功耗上收益的决策</strong>。代价是你需要花额外0.4s的$T_{run}$在这一层停下并开关门，性能上却相当划算。</li>
</ul>
<p>因此，在六台电梯分别接受分配请求的时间线中，我选出所有接受分配请求后，$\Delta T_{run} \leq 1s$的时间线并纳入考虑，如果没有符合条件的，则选出$T_{run}$增加值最小的一种情况直接作为分配结果。</p>
<p>接下来我们就可以不考虑$T_{run}$对性能的影响了，即使还有影响，也不到1s，可以大致忽略。我们要考虑，经过筛选后的若干种情况里，加权平均时间$wT$和功耗$W$综合最优的一种情况。但由于性能分是与同学们排名后计算的，我并不知道怎样取得综合最优，理论上我们需要满足：</p>
$$\begin{align*}
\Delta \text{cost} &= a \Delta wT + b \Delta W, \quad a + b = 1 \\
\begin{pmatrix} a & b \end{pmatrix} &= \arg\min \Delta \text{cost}
\end{align*}$$<p>我取$\begin{pmatrix} a &amp; b \end{pmatrix} = \begin{pmatrix} \frac{10}{10+1} &amp; \frac{1}{10+1} \end{pmatrix}$，最后效果尚可。</p>
<h1 id="双轿厢线程协作是否应该影响对象行为">双轿厢：线程协作是否应该影响对象行为？</h1>
<p>我们已经论述过了，时间是线程（具体来讲，是<code>Printer</code>这一打印机线程）要考虑的，线程是<strong>动态的、连续的</strong>，共享对象只有状态，是<strong>静态的、瞬间的</strong>。</p>
<p>所以双轿厢电梯的行为，是共享对象所考虑的，同步开始改造和避免相撞却是线程所需保证的。</p>
<p>具体来讲，我们采取的策略是到达临界楼层后，通过锁等方式让协作线程若有需求先等待自己完成任务，自己完成后尽快退出临界楼层（当然该行为也是共享对象所存储的，而非线程唤起的），放还锁让协作线程继续动态行为。</p>
<p>而在同步改造方面：</p>
<ul>
<li>当两电梯的下一execution均为<code>UPDATE-BEGIN</code>时，由分配器输出<code>UPDATE-BEGIN</code>并唤醒两打印机线程进入计时。两线程共享一把锁。</li>
<li>其中一台电梯<code>UPDATE-BEGIN</code>时锁上共享锁，<code>UPDATE-END</code>时先输出<code>UPDATE-END</code>，然后放还共享锁。</li>
<li>另一台电梯不输出，<code>UPDATE-BEGIN</code>时无行为，但<code>UPDATE-END</code>时先尝试拿到共享锁，拿到后立即放还，然后才执行自己的后续操作。</li>
<li>这样，我们就实现了两协作线程的同步。</li>
</ul>
<p>在这一过程中，线程间的交互不对对象状态产生影响，只对状态转移的时间，即线程行为有所限制。故而，<strong>线程协作不影响对象行为</strong>。</p>
<blockquote>
<p>接下来补充比较重要的内容。</p></blockquote>
<h1 id="架构设计">架构设计</h1>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="UML.png">
        <img alt="UML" loading="lazy" src="/posts/buaa/oo/unit-2/summary/UML_hu_acfc11404447a7e.webp">
    </a>
</div></p>
<p>很明显能看出三段的设计：$线程-共享对象-线程-共享对象-线程$。</p>
<p>前文已介绍过该架构的工作流程，在第一次作业中，我采用与大家相同的架构，而在第二次作业的重构中，我将电梯线程的功能解构提取，变成了如上的只保留简单功能的<code>PrinterThread</code>。第三次作业中，无新增类。</p>
<p>值得介绍的是Scheduler类，其包装了该状态机的决策行为，也即其所有的状态转移计算过程。通过封装Scheduler，我们实现了电梯决策器的可拓展性：当我们需要更换、优化电梯算法，只需要换一个Scheduler或者继承原Scheduler即可。</p>
<blockquote>
<p>这里给出一种性能优化思路，配备多种Scheduler，考虑每种电梯装载不同Scheduler，采取不同算法的时间线，并综合总的性能考量，返回给各状态机最优的executions。但该方法的计算量预估提升了一个数量级，为避免CTLE，应谨慎考虑。</p></blockquote>
<h1 id="线程协作">线程协作</h1>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="sequence-diagram.png">
        <img alt="Sequence Diagram" loading="lazy" src="/posts/buaa/oo/unit-2/summary/sequence-diagram_hu_5e2a5a58756fb817.webp">
    </a>
</div>
上图已明了介绍线程中的协作关系，此处详细解释最后的线程结束的判定：</p>
<ul>
<li>首先，输入线程的结束条件很清晰：读取到值为<code>null</code>的请求时。</li>
<li>但对于Request Queue来说，输入线程与六个电梯线程同时作为生产者，分配器作为消费者；同时，对于每个电梯状态机，分配器是生产者，电梯线程是消费者。</li>
<li>这就形成了一个圈：分配器与电梯互为消费者和生产者，而生产者没有结束时，消费者自然不可以结束。</li>
<li>因此，我们重新定义电梯线程作为生产者的结束：当其executions为空，即空闲状态下，它自然不可能再放归新的请求，我们可以认为其处于临时的结束状态。</li>
<li>而对于此时的调度器，倘若没有需要分配的请求，其会尝试结束：
<ul>
<li>输入线程已结束</li>
<li>各电梯线程处于空闲状态</li>
<li>也即对于RequestQueue，不会有新的生产，也因此没有消费行为和消费行为导致的新的生产。</li>
</ul>
</li>
<li>此时调度器可以认为达到结束条件，结束自身线程并对后续所有线程设置结束。</li>
</ul>
<blockquote>
<p>有趣的和重要的均已结束，现在补充作业要求的其他内容。</p></blockquote>
<h1 id="易变的内容">易变的内容</h1>
<p>稳定的内容已于上文完成分析，而易变的内容，我们需着眼分析两个“例外”：<code>SCHE</code>和<code>UPDATE</code>。</p>
<ul>
<li>对于<code>SCHE</code>，我选择将<code>ScheBegin</code>和<code>ScheEnd</code>纳入<code>Executeable</code>范畴，将其视为状态机的正常状态转移行为，从而使其回归稳定的内容的体系；</li>
<li>对于<code>UPDATE</code>大体相同，但<code>UPDATE-BEGIN</code>实在太特殊，为了两电梯之间的同步，我将其设置为电梯的一种新的状态并因此补充了大量特判，这也是引发我bug的直接原因：补丁没打全。</li>
</ul>
<h1 id="bug分析与debug方法">Bug分析与Debug方法</h1>
<p>第一二次作业无bug，对第三次作业的<code>UPDATE-BEGIN</code>处理引发了第三次作业的bug，并直接导致了强测爆炸：</p>
<p>对于<code>UPDATE-ACCEPT</code>前分配给电梯的请求，经过改造后并不一定能接受，因为其所在楼层不一定属于自己所能移动的范围内。而为了避免<code>UPDATE</code>和<code>SCHE</code>之间无法<code>RECEIVE</code>请求导致分配器轮询，我为每个电梯配置<code>RECEIVE</code>请求缓存区，囤积在<code>END</code>后再输出，因此错过了<code>UPDATE-BEGIN</code>时清空当前已<code>RECEIVE</code>请求的机会，从而可能<code>RECEIVE</code>改造后无法处理的请求。</p>
<p>改正方法为：<code>UPDATE</code>开始时清除<code>RECEIVE</code>缓存区中自己改造后无法处理的请求。</p>
<p>Debug方法为输出。当debug模式启用时，输出各关键行为前后的线程状态、状态机状态。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// MainProcess.java</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">debug</span>() { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>; }
</span></span></code></pre></div><blockquote>
<p>虽然本次作业没有要求课程建议，但是实在很想建议：
能不能给一个<code>TimableOutput.debug(String string)</code>然后输出内容不计入评测，只供debug时便于人类查看，间接解决掉评测出的bug在本地无法复现的问题？这样只要写好关键步骤的日志，就能快速定位到bug，即使本地无法复现也可以正常修复？</p></blockquote>
<h1 id="线程安全与层次化设计">线程安全与层次化设计</h1>
<ol>
<li><strong>锁的合理使用</strong>
<ul>
<li>在本次作业中，线程安全是至关重要的。尤其是在处理多线程的电梯调度和状态更新时，锁的使用非常关键。例如，在电梯线程和分配器线程之间共享的状态机状态（如电梯的当前楼层、电梯内乘客队列等）必须通过锁来保证线程安全。</li>
<li>我们使用了<code>ReentrantLock</code>来确保在更新状态时不会出现竞态条件。例如，在电梯线程执行状态转移时，需要对<code>executions</code>队列进行操作，此时必须加锁，防止分配器线程同时修改该队列。同时，锁的使用也需要谨慎，避免死锁的发生。在电梯线程和分配器线程之间，我们通过合理的锁顺序和锁的释放时机来避免死锁。</li>
<li>使用<code>ReentrantLock</code>有什么好处？条件管理更灵活，而且锁可以脱离对象或代码块而存在，请看使用了<code>ReentrantLock</code>的影子电梯的名场面<strong>六把锁</strong>：</li>
</ul>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>   elevators.<span style="color:#a6e22e">forEach</span>(Elevator::lock);
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// 计算与分配</span>
</span></span><span style="display:flex;"><span>   elevators.<span style="color:#a6e22e">forEach</span>(Elevator::unlock);
</span></span></code></pre></div><ol start="2">
<li><strong>线程间通信的同步机制</strong>
<ul>
<li>线程间通信的安全性也是线程安全的重要方面。在本次作业中，电梯线程和分配器线程之间通过<code>executions</code>队列进行通信，而这个队列的更新和读取必须是线程安全的。</li>
<li>我们使用了<code>Condition</code>来实现线程间的同步。例如，当电梯线程处于空闲状态时，它会调用<code>await()</code>等待分配器线程的信号。分配器线程在计算出新的<code>executions</code>后，会调用<code>signal()</code>唤醒电梯线程。这种同步机制确保了线程间通信的正确性和及时性。</li>
<li>同时，在处理双轿厢电梯的<strong>同步</strong>（改造期间）与<strong>互斥</strong>（临界楼层）时，我们通过共享一把<code>ReentrantLock</code>来实现两台电梯线程之间的同步。这种同步机制不仅保证了线程安全，还避免了电梯之间的冲突。</li>
</ul>
</li>
<li><strong>架构设计的层次化</strong>
<ul>
<li>层次化设计使得代码更加清晰和易于维护。在本次作业中，我们将整个电梯系统划分为多个功能模块，每个模块负责特定的功能。</li>
<li>例如，输入线程负责读取请求并将其放入请求队列；分配器线程负责从请求队列中取出请求并分配给电梯；电梯线程负责执行电梯的状态转移。这种模块划分使得每个线程的功能单一，便于理解和维护。</li>
<li>同时，我们还引入了<code>Scheduler</code>类来封装电梯的状态转移计算逻辑。这样，当需要更换或优化电梯算法时，只需要修改<code>Scheduler</code>类，而不需要修改电梯线程的代码。这种层次化设计提高了代码的可扩展性和可维护性。</li>
</ul>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>[BUAA-OO] Unit 1 总结</title>
      <link>https://oNya685.github.io/posts/buaa/oo/unit-1/summary/</link>
      <pubDate>Sat, 22 Mar 2025 14:16:55 +0800</pubDate>
      <guid>https://oNya685.github.io/posts/buaa/oo/unit-1/summary/</guid>
      <description>第一单元博客作业</description>
      <content:encoded><![CDATA[<h1 id="架构简介">架构简介</h1>
<p>在本单元中，作业要求我们对提供了<strong>形式化表述</strong>的复杂表达式进行<strong>解析和化简</strong>，并要求尽可能简短的输出以度量性能分数。</p>
<p>而经过三次作业迭代（其中包含一次重构），最终架构设计图如下：</p>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="UML.png">
        <img loading="lazy" src="/posts/buaa/oo/unit-1/summary/UML_hu_c7d81f24e8d7bd9b.webp">
    </a>
</div></p>
<p>核心处理部分在于递归解析模块的两个递归，在图中具体表现为两个圈。接下来介绍和分析各模块的结构。</p>
<h2 id="主线处理">主线处理</h2>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="%E4%B8%BB%E7%BA%BF%E6%B5%81%E7%A8%8B.png">
        <img alt="主线处理" loading="lazy" src="/posts/buaa/oo/unit-1/summary/%E4%B8%BB%E7%BA%BF%E6%B5%81%E7%A8%8B_hu_50ee1355f57dc9d.webp">
    </a>
</div></p>
<p>本模块是整个项目的主体部分，其中箭头含义表示流程顺序，不代表类的继承关系。主要流程呈现为main方法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>String input <span style="color:#f92672">=</span> scanner.<span style="color:#a6e22e">nextLine</span>();  <span style="color:#75715e">// 读入</span>
</span></span><span style="display:flex;"><span>Lexer lexer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Lexer(input.<span style="color:#a6e22e">replaceAll</span>(<span style="color:#e6db74">&#34; &#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>).<span style="color:#a6e22e">replaceAll</span>(<span style="color:#e6db74">&#34;\t&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>));          <span style="color:#75715e">// 词法解析</span>
</span></span><span style="display:flex;"><span>Parser parser <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Parser(lexer);  <span style="color:#75715e">// 传入Tokens</span>
</span></span><span style="display:flex;"><span>System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(parser  
</span></span><span style="display:flex;"><span>    .<span style="color:#a6e22e">parseExpr</span>()                    <span style="color:#75715e">// 语法解析</span>
</span></span><span style="display:flex;"><span>    .<span style="color:#a6e22e">assign</span>(<span style="color:#66d9ef">null</span>)                   <span style="color:#75715e">// 赋值处理函数调用</span>
</span></span><span style="display:flex;"><span>    .<span style="color:#a6e22e">toPoly</span>()                       <span style="color:#75715e">// 计算化简</span>
</span></span><span style="display:flex;"><span>    .<span style="color:#a6e22e">Print</span>()                        <span style="color:#75715e">// 构造StringBuilder</span>
</span></span><span style="display:flex;"><span>    .<span style="color:#a6e22e">toString</span>());                   <span style="color:#75715e">// 输出结果</span>
</span></span></code></pre></div><p>这样类似<strong>流水线</strong>的设计的优点是显而易见的，我们只需写好每一模块，封装成<strong>黑盒</strong>，确保每一部分的程序正确性，就可以完整实现所需功能。</p>
<p>然而，见上面整体图可以看出，除了实现核心功能的解析模块，其余部分的<strong>耦合度</strong>其实是偏高的。</p>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="Pasted%20image%2020250321102634.png">
        <img alt="Method Metrics" loading="lazy" src="/posts/buaa/oo/unit-1/summary/Pasted%20image%2020250321102634_hu_e1b1a3fedae6e702.webp">
    </a>
</div></p>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="Pasted%20image%2020250321102951.png">
        <img alt="Class Metrics" loading="lazy" src="/posts/buaa/oo/unit-1/summary/Pasted%20image%2020250321102951_hu_12bd78d8e3f53682.webp">
    </a>
</div></p>
<p>我们会发现，<code>Lexer</code>, <code>Parser</code>, <code>Poly</code>这几个在主线中实现了相当一部分功能的类，因为把大量的<strong>重复性</strong>功能藏在一个类甚至一个方法内部实现（例如Lexer的大量if-else出现了控制分支数目大的问题），出现了耦合度过高、可读性差的问题。</p>
<p>举例来说，我们可以分析这个只由两个类实现计算、化简、简化功能的模块：</p>
<h2 id="计算化简">计算化简</h2>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="%E8%AE%A1%E7%AE%97%E5%8C%96%E7%AE%80%E6%A8%A1%E5%9D%97.png">
        <img alt="计算化简" loading="lazy" src="/posts/buaa/oo/unit-1/summary/%E8%AE%A1%E7%AE%97%E5%8C%96%E7%AE%80%E6%A8%A1%E5%9D%97_hu_9a0ff4d29315da4b.webp">
    </a>
</div></p>
<p>这个模块内部实现了过多功能，方法个数多，方法规模大，只因它们都涉及到用于存储化简后输出结果的类——<code>Poly</code>（多项式）和<code>Mono</code>（单项式）——这就导致了这一部分难读、难拆、难拓展。</p>
<h2 id="递归解析">递归解析</h2>
<p>而与之相对的，由于有先导课程的最后一次作业的架构作参考，这个采用递归下降法解析和存储的模块有相当良好的可拓展性和低耦合度。</p>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="%E9%80%92%E5%BD%92%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97.png">
        <img alt="递归解析" loading="lazy" src="/posts/buaa/oo/unit-1/summary/%E9%80%92%E5%BD%92%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97_hu_94324e327feaacb4.webp">
    </a>
</div></p>
<p>这一模块的度量值相当良好，故省略去分析。这一部分的递归主要在于</p>
<ol>
<li><code>Expr</code> - <code>Term</code> - <code>&lt;Factor&gt; ExprFactor</code> - <code>Expr</code> （见橙色箭头）形成的环，该递归改编自先导课程作业代码。</li>
<li><code>Expr</code> - <code>Term</code> - <code>&lt;Factor&gt; &lt;VarFactor&gt; FuncCall</code> - <code>&lt;FuncDefine.exprs&gt; Expr</code> 。这一递归赋值处理函数调用的思路详见我在第二次作业中的<a href="http://oo.buaa.edu.cn/assignment/608/discussion/1656" target="_blank">讨论发帖</a>
，当然，在非校园网环境下，你也可以<a href="https://oNya685.github.io/posts/buaa/oo/unit-1/homework-2-function/" target="_blank">从此获取</a>
。这一设计有极好的可拓展性，我们将在下一节进一步讨论。</li>
</ol>
<h1 id="迭代成型">迭代成型</h1>
<h2 id="第一次作业">第一次作业</h2>
<p>通过采用先导课的递归下降设计，第一次作业的难点就主要在于计算与化简的部分了。此时我们埋下了直接导致需要重构的第一个雷，对于幂函数的处理，我没有完全参照形式化表述的思路，而是单独设计了一个类来表示幂函数，并于计算时再具体展开。</p>
<h2 id="第二次作业">第二次作业</h2>
<h3 id="重构形式化表述">重构：形式化表述</h3>
<p>重构前后的复杂度其实近似，故省去分析，但值得注意的是前后的架构设计：</p>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="%E9%87%8D%E6%9E%84%E5%AF%B9%E6%AF%94.png">
        <img loading="lazy" src="/posts/buaa/oo/unit-1/summary/%E9%87%8D%E6%9E%84%E5%AF%B9%E6%AF%94_hu_538427942ba17d30.webp">
    </a>
</div></p>
<p>其实都很明了，但最主要的区别其实是：<strong>重构后的类的设计完全符合了给出的形式化表述</strong>。第二次作业的迭代突然把形式化表述内容几乎翻倍不止，如果要沿着原来的架构像打补丁一样加上这大量的迭代内容，很可能最后根本写不完。</p>
<p>而重构后的迭代体验也大幅提升：我只需要无脑照抄形式化表述，就能写好解析器，设计好各个类，这不仅省下了时间，也直接跳过了大量与形式化表述不统一而可能引发的潜在的bug。</p>
<h3 id="另一个大任务是递归函数调用的处理">另一个大任务是递归函数调用的处理</h3>
<p>在得知该迭代需求后，我耗费了相当久的时间思考如何以合理、优雅的方式处理递归函数调用，最终设计的一套<a href="https://oNya685.github.io/posts/buaa/oo/unit-1/homework-2-function/" target="_blank">处理思路</a>
取得了相当好的<strong>可拓展性</strong>和相对低的耦合度，并结合<strong>动态规划</strong>和藏在其中的部分简化（例如，若某<code>ExprFactor</code>的<code>Expr</code>有且只有一个<code>Term</code>，该<code>Term</code>有且只有一个<code>Factor</code>，则该<code>ExprFactor</code>的简化方法返回该<code>Factor</code>，否则返回自身），实现了时间和空间上的大幅优化，并顺利解决掉了当<code>f{n}</code>的<code>n</code>过大时易爆栈的问题（事实上，事后发现课程组的Cost限制完全不足以超时或爆栈）。</p>
<h2 id="第三次作业">第三次作业</h2>
<p>虽说在第二次作业的互测里被打了不少次，理应来说，如果有继续迭代开发的需求，我会继续重构，并明确几点：</p>
<ul>
<li>对象属性是否<strong>可变</strong>，会用到返回值的各种方法除了返回值之外应不应该产生<strong>副作用</strong>，会不会错误得<strong>复用</strong>某对象。</li>
<li>明确哪些类需要重写<code>hashCode()</code>和<code>equals()</code>，这一点对于优化性能得分至关重要。</li>
<li>耦合度过高的<code>Poly</code>和<code>Mono</code>是肯定要拆的，怎么<strong>分解</strong>而能继续实现原有功能，怎么设计更适合迭代的<strong>架构</strong>，怎么给优化性能留位置等。</li>
</ul>
<p>但我并没有重构——第三次作业的需求很简单：</p>
<p>一是普通函数调用，我原设计的递归函数调用处理方法有相当的可拓展性，我甚至<strong>没有修改函数相关的类</strong>就轻松实现了该要求。</p>
<p>二是求导因子，但课程组给求导因子的限制过大，尤其是出现范围十分限定，因此我们只需在主线的流水线挑一个方便的环节（包括解析，运算，赋值，简化），附带上求导运算，就实现了。</p>
<p>所以为什么不重构？第二次作业虽然烂了点，但经过强侧和互测的检验，打完补丁就是能<strong>保障正确性</strong>的代码。重构意味着要重新面对潜在的bug，而在当前这一坨上作简单的迭代并没有显著难度，正确性也更有保障。因此，没有第二次重构。</p>
<h1 id="bug分析">Bug分析</h1>
<h2 id="诡异的hashmap">诡异的<code>HashMap</code></h2>
<p>这一bug并不是被测出来的：不解决这bug程序完全不能跑。这一单元里，大家都或多或少地与HashMap之类的容器或者hashCode等方法斗争了许久。至今我也不知道，除了新建一个容器往里塞，怎么遍历才能做到不报错。如果有下次，我可能选<code>.stream().map().collect()</code>。</p>
<h2 id="完全符合形式化表述但符合得不太完全">完全符合形式化表述，但符合得不太完全</h2>
<pre tabindex="0"><code>&lt;递推表达式&gt; → &lt;常数因子&gt; &lt;空白项&gt; &#39;*&#39; &lt;空白项&gt; &lt;自定义递推函数调用n-1&gt; &lt;空白项&gt; &lt;加减&gt; &lt;空白项&gt; &lt;常数因子&gt; &lt;空白项&gt; &#39;*&#39; &lt;空白项&gt; &lt;自定义递推函数调用n-2&gt; [&lt;空白项&gt; &#39;+&#39; &lt;空白项&gt; &lt;函数表达式&gt;]
</code></pre><p>虽然经过一次完全符合形式化表述的重构，但因为我的设计足以实现对函数调用的解析，所以我本以为递推表达式就是比较特殊的表达式，其实不然。这个<code>[&lt;空白项&gt; '+' &lt;空白项&gt; &lt;函数表达式&gt;]</code>的诡异的加号让<code>... + + + +1</code>这样的表述变成了可能。这一bug着实很坑，但也没有什么经验可总结。</p>
<h2 id="谁会在sin里套sinsin">谁会在<code>sin()</code>里套<code>sin()*sin()</code>？</h2>
<p>本以为第三次作业大家都差不多，互测更是全房 0 Hack，应该不会有bug了……吗？</p>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="Pasted%20image%2020250321193556.png">
        <img alt="Bug修复：最后一次Commit" loading="lazy" src="/posts/buaa/oo/unit-1/summary/Pasted%20image%2020250321193556_hu_28ecd893e0e44ae4.webp">
    </a>
</div></p>
<p>啊，输出了<code>sin(sin(...)*sin(...))</code>，但里面是一个表达式而非一个因子，所以应该是<code>sin((sin(...)*sin(...)))</code>。省去了不该省的括号。这个小bug从第二次作业互测测到第三次作业互测，都没有被测出来，第三次强测反倒测出来了，如果侥幸一点没测出来，这个bug可能永远都不会被发现了。</p>
<h2 id="当然也有喜闻乐见的">当然也有喜闻乐见的</h2>
<p>最喜欢分析的bug是别人的bug，在此稍加分析有参考意义的两例。</p>
<h3 id="extratriangle">extraTriangle!!!</h3>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="2007db7b678091ac411a41f40a2e1d2.jpg">
        <img loading="lazy" src="/posts/buaa/oo/unit-1/summary/2007db7b678091ac411a41f40a2e1d2_hu_7d7b277097085463.webp">
    </a>
</div></p>
<p><code>extraTriangle!!!</code>一位没删用于调试的输出信息的同学如是喊道。</p>
<p>这一bug值得分析是因为教会了我们设计一个调试开关，例如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// MainClass.java</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Class MainClass {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">debug</span>() { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>; }
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (MainClass.<span style="color:#a6e22e">debug</span>()) {
</span></span><span style="display:flex;"><span>			System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Debug模式还没关，别看都不看就直接交了&#34;</span>);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		...
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="可能复用的对象clone或谨防副作用">可能复用的对象，<code>clone()</code>或谨防副作用</h3>
<p>我用一个简单的函数，调用了<code>f{5}(x,x^2)</code>，就一次刀穿了三人（不过其中一人其实没错，他只是在喊<code>extraTriangle!!!</code>），仔细看看，竟与之前发现并修掉的bug如出一辙。有的时候，我们需要这个对象本身，有的时候，我们只是需要这个对象的值。</p>
<p>张三长大了一岁，无论是谁眼中的张三，都长大了一岁。有的时候，我们需要给张三拍照，把他当前的样子保留下来（或者是生成一个和当前的张三长得一样的克隆人）。问题就出在，可能A让张三长大了一岁，而B想给张三拍照时并没考虑到张三长大了一岁，拍下了不符合预期的照片。</p>
<p>我的解决方案是，A生成张三的克隆人，并把克隆人当成张三，后续让“张三”长大一岁，原来的张三就不会受到影响，B随时都可以给张三拍照拍到正确的样子。</p>
<h1 id="测试策略">测试策略</h1>
<p>看源代码还是太折磨了，只有第一次作业读代码来设计测试用例了，后来都找不到用正则解析的了，大家处理思路十分趋同，与其看代码，不如直接构造各类极端样例，进行盲测了。</p>
<p>当然不能直接用互测窗口测，CD太长；也不能开八个IDEA窗口挨个输入，效率太低；首先将八个压缩包编译生成八个jar包，然后用命令行批量处理，用文件实现读写，最后把大家的答案扔进优化得最好最稳定的同学的jar包，就能得到格式统一的输出了。当然这是不够严谨的做法，我们也可以采取python的一些妙妙工具，把输出的字符串里的x直接文本替换成各种刁钻的数值，评判输出的纯数字结果是不是相隔很小即可（理论上结果应该一模一样，但三角函数优化和浮点数带来的误差不可避免）。</p>
<h1 id="优化策略">优化策略</h1>
<p>前文已经提到了大部分的优化，因为实在无力处理三角函数的各种优化，且保住正确性分比贪性能分更稳妥。</p>
<p>现介绍前文未提到的两处优化：</p>
<h2 id="重写equals以合并同类项">重写<code>equals()</code>以合并同类项</h2>
<p>与之对应的，我们也要重写<code>hashCode()</code>以实现在HashMap中能找到该同类项。</p>
<p>这样我们就可以应对括号内的值<strong>存在关联性</strong>的三角函数之间的合并了。</p>
<h2 id="为返回值作顺带简化">为返回值作顺带简化</h2>
<p>例如前文提到的将<code>ExprFactor</code>返回其中仅有的<code>Factor</code>，可以一定程度上省去不必要的括号；又如<code>cos(0)</code>和<code>sin(0)</code>，可以直接返回具体数值。</p>
<h1 id="心得体会">心得体会</h1>
<p>虽然第三次作业的轻松要求确实减少了我们的工作量，让我直接放弃了第二次的重构，但我仍没能理解普通函数调用为什么会放在递归函数调用之后作为新要求迭代。第二次作业的任务量也着实有些惊悚，不知是传统还是失误。</p>
<p>总的来说，第一单元在先导课提供了参考架构的基础上还算顺利，也能明显感到有所收获，期待第二单元的灵异电梯。</p>
]]></content:encoded>
    </item>
    <item>
      <title>用Condition干掉notifyAll</title>
      <link>https://oNya685.github.io/posts/buaa/oo/condition/</link>
      <pubDate>Mon, 17 Mar 2025 16:04:09 +0800</pubDate>
      <guid>https://oNya685.github.io/posts/buaa/oo/condition/</guid>
      <description>介绍notify()与notifyAll()的区别，推荐ReentrantLock</description>
      <content:encoded><![CDATA[<p><code>synchronized</code>关键字修饰的局部代码块内，我们能通过<code>wait()</code>, <code>notify()</code>, <code>notifyAll()</code>方法来调控线程之间的协作。</p>
<h1 id="notify和notifyall是什么"><code>notify()</code>和<code>notifyAll()</code>是什么？</h1>
<p>我们先定义两个概念，一个是<strong>等待池</strong>，一个是<strong>锁池</strong>，它们都是随一个锁而形成的<strong>暂存线程</strong>的容器。具体来说：</p>
<p><strong>等待池</strong>中的线程只有被<strong>通知</strong>（notify）时，才会进入<strong>锁池</strong>；否则什么也不做。</p>
<p><strong>锁池</strong>中的线程会不断尝试<strong>抢锁</strong>，如果抢到了锁，会进入<code>synchronized</code>，从开头或上次离开的位置（通过wait离开时）继续执行。</p>
<p>当某线程尝试进入<code>synchronized</code>，即尝试<strong>抢锁</strong>，但<strong>失败</strong>了（因为有其他线程在占用这把锁）时，它会进入<strong>锁池</strong>，持续不断尝试抢锁。</p>
<p>当某线程<strong>抢锁成功</strong>，进入了<code>synchronized</code>，它会离开<strong>锁池</strong>。</p>
<p>当某线程进入了<code>synchronized</code>，并遵循程序的设计，执行了<code>wait()</code>方法，它会进入<strong>等待池</strong>。</p>
<p>当某线程在<code>synchronized</code>中执行了<code>notify()</code>方法，会从<strong>等待池</strong>中随机选取一个线程让其移动到<strong>锁池</strong>。</p>
<p>当某线程在<code>synchronized</code>中执行了<code>notifyAll()</code>方法，会将<strong>等待池</strong>中的所有线程移动到<strong>锁池</strong>。</p>
<h1 id="什么时候用notify什么时候用notifyall">什么时候用<code>notify()</code>，什么时候用<code>notifyAll</code>？</h1>
<h2 id="考虑某多线程任务">考虑某多线程任务</h2>
<p>假设我们有一个资源池，生产者线程向其中添加资源，消费者线程从中获取资源。我们需要确保生产者在资源池满时等待，消费者在资源池空时等待。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.LinkedList;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.Queue;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResourcePool</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Queue<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">&gt;</span> resources <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> capacity;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> Object lock <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Object();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResourcePool</span>(<span style="color:#66d9ef">int</span> capacity) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">capacity</span> <span style="color:#f92672">=</span> capacity;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">rent</span>(Object resource) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">synchronized</span> (lock) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> (resources.<span style="color:#a6e22e">size</span>() <span style="color:#f92672">&gt;=</span> capacity) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>	                System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;生产者进入等待&#34;</span>);
</span></span><span style="display:flex;"><span>                    lock.<span style="color:#a6e22e">wait</span>(); <span style="color:#75715e">// 如果资源池已满，生产者等待</span>
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;生产者被唤醒&#34;</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            resources.<span style="color:#a6e22e">add</span>(resource);
</span></span><span style="display:flex;"><span>            System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;生产者: 生产了一个资源, 当前资源数: &#34;</span> <span style="color:#f92672">+</span> resources.<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>            lock.<span style="color:#a6e22e">notify</span>(); <span style="color:#75715e">// 唤醒等待的消费者线程</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Object <span style="color:#a6e22e">consume</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">synchronized</span> (lock) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> (resources.<span style="color:#a6e22e">isEmpty</span>()) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>	                System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;消费者进入等待&#34;</span>);
</span></span><span style="display:flex;"><span>                    lock.<span style="color:#a6e22e">wait</span>(); <span style="color:#75715e">// 如果资源池为空，消费者等待</span>
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;消费者被唤醒&#34;</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            Object resource <span style="color:#f92672">=</span> resources.<span style="color:#a6e22e">remove</span>();
</span></span><span style="display:flex;"><span>            System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;消费者: 消费了一个资源, 当前资源数: &#34;</span> <span style="color:#f92672">+</span> resources.<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>            lock.<span style="color:#a6e22e">notify</span>(); <span style="color:#75715e">// 唤醒等待的生产者线程</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> resource;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>        ResourcePool pool <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResourcePool(1);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 借用者1</span>
</span></span><span style="display:flex;"><span>        Thread renter <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 5; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                pool.<span style="color:#a6e22e">rent</span>();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                    Thread.<span style="color:#a6e22e">sleep</span>(1000);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        producer.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>        consumer.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>在本例中，只有一个生产者线程和一个消费者线程，它们<code>notify()</code>时，只会唤醒彼此，它们被唤醒并继续运行的条件均为<code>resources</code>暂时没被其他人访问。</p>
<h2 id="考虑生产者-消费者多线程任务">考虑生产者-消费者多线程任务</h2>
<p>在生产者-消费者模型中，生产者和消费者线程需要协调工作。生产者在资源池满时等待，消费者在资源池空时等待。当资源池有空间或有资源时，相应的线程被唤醒。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.LinkedList;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.Queue;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResourcePool</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Queue<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">&gt;</span> resources <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> capacity;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> Object lock <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Object();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResourcePool</span>(<span style="color:#66d9ef">int</span> capacity) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">capacity</span> <span style="color:#f92672">=</span> capacity;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">produce</span>(Object resource) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">synchronized</span> (lock) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> (resources.<span style="color:#a6e22e">size</span>() <span style="color:#f92672">&gt;=</span> capacity) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>	                System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;生产者进入等待&#34;</span>);
</span></span><span style="display:flex;"><span>                    lock.<span style="color:#a6e22e">wait</span>(); <span style="color:#75715e">// 如果资源池已满，生产者等待</span>
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;生产者被唤醒&#34;</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            resources.<span style="color:#a6e22e">add</span>(resource);
</span></span><span style="display:flex;"><span>            System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;生产者: 生产了一个资源, 当前资源数: &#34;</span> <span style="color:#f92672">+</span> resources.<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>            lock.<span style="color:#a6e22e">notifyAll</span>(); <span style="color:#75715e">// 唤醒所有等待的消费者线程</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Object <span style="color:#a6e22e">consume</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">synchronized</span> (lock) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> (resources.<span style="color:#a6e22e">isEmpty</span>()) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>	                System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;消费者进入等待&#34;</span>);
</span></span><span style="display:flex;"><span>                    lock.<span style="color:#a6e22e">wait</span>(); <span style="color:#75715e">// 如果资源池为空，消费者等待</span>
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;消费者被唤醒&#34;</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            Object resource <span style="color:#f92672">=</span> resources.<span style="color:#a6e22e">remove</span>();
</span></span><span style="display:flex;"><span>            System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;消费者: 消费了一个资源, 当前资源数: &#34;</span> <span style="color:#f92672">+</span> resources.<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>            lock.<span style="color:#a6e22e">notifyAll</span>(); <span style="color:#75715e">// 唤醒所有等待的生产者线程</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> resource;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>        ResourcePool pool <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResourcePool(3);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 生产者线程</span>
</span></span><span style="display:flex;"><span>        Thread producer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 5; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                pool.<span style="color:#a6e22e">produce</span>(<span style="color:#66d9ef">new</span> Object());
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                    Thread.<span style="color:#a6e22e">sleep</span>(1000);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 消费者线程1</span>
</span></span><span style="display:flex;"><span>        Thread consumer1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 5; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                pool.<span style="color:#a6e22e">consume</span>();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                    Thread.<span style="color:#a6e22e">sleep</span>(1000);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 消费者线程2</span>
</span></span><span style="display:flex;"><span>        Thread consumer2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 5; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                pool.<span style="color:#a6e22e">consume</span>();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                    Thread.<span style="color:#a6e22e">sleep</span>(1000);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        producer.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>        consumer1.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>        consumer2.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="为什么要用notifyall用notify会怎么样">为什么要用<code>notifyAll()</code>？用<code>notify()</code>会怎么样？</h3>
<p>使用<code>notifyAll()</code>会唤醒所有等待的线程，确保它们都能重新评估条件。而使用<code>notify()</code>只唤醒一个线程，可能会导致该锁<strong>假死</strong>：有线程在等待，但没有线程在占用或竞争该锁。</p>
<p>如果使用<code>notify()</code>：</p>
<ul>
<li>如果当前资源数为1，且消费者1消耗了一个资源并执行<code>notify()</code>，此时资源数为0；
<ul>
<li>如果消费者1恰好<code>notify()</code>了生产者，正常运行；</li>
<li>如果不巧，消费者1<code>notify()</code>了消费者2，消费者2会因为没有可用资源而重新<code>wait()</code>；
<ul>
<li>此时三者都处于等待池，锁池为空，程序陷入<strong>假死</strong>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>如果使用<code>notifyAll()</code>：</p>
<ul>
<li>所有等待的线程都会被唤醒，重新评估条件。</li>
<li>即使某些线程发现条件不满足并继续等待，其他线程仍然有机会执行。</li>
</ul>
<h2 id="如何判断用notify还是notifyall">如何判断用<code>notify()</code>还是<code>notifyAll()</code>？</h2>
<p>判断使用<code>notify()</code>还是<code>notifyAll()</code>的关键在于线程等待的<strong>条件</strong>（condition）是否相同。</p>
<ul>
<li>如果所有等待的线程都在等待同一个条件，使用<code>notify()</code>可能足够。</li>
<li>如果线程等待的条件不同，或者需要确保所有线程都能重新评估条件，使用<code>notifyAll()</code>更安全。</li>
</ul>
<blockquote>
<p>要是我们能给不同的线程设置不同的等待条件该多好。生产者生产后只唤醒条件为<code>资源不为空</code>的消费者，消费者消费后只唤醒条件为<code>资源不为满</code>的生产者们，那就肯定不会假死了！</p></blockquote>
<h2 id="用synchronized的代码怎么改造成用reentrantlock和condition">用<code>synchronized</code>的代码怎么改造成用<code>ReentrantLock</code>和<code>Condition</code></h2>
<h3 id="什么是reentrantlock">什么是<code>ReentrantLock</code></h3>
<p><code>ReentrantLock</code>是一个可重入的互斥锁，它提供了与<code>synchronized</code>类似的功能，但更加灵活。它允许更细粒度的锁控制，并且可以配合<code>Condition</code>对象使用。</p>
<h3 id="condition有什么优势"><code>Condition</code>有什么优势</h3>
<p><code>Condition</code>接口提供了类似于<code>wait()</code>、<code>notify()</code>和<code>notifyAll()</code>的方法，但更加灵活。它允许一个锁对象有多个<code>Condition</code>实例，每个实例可以用于不同的条件等待和通知。</p>
<h3 id="代码改造">代码改造</h3>
<p>将上述代码改造成使用<code>ReentrantLock</code>和<code>Condition</code>：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.LinkedList;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.Queue;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.concurrent.locks.Condition;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.concurrent.locks.Lock;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.concurrent.locks.ReentrantLock;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResourcePool</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> Queue<span style="color:#f92672">&lt;</span>Object<span style="color:#f92672">&gt;</span> resources <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> capacity;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> Lock lock <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ReentrantLock();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> Condition notFull <span style="color:#f92672">=</span> lock.<span style="color:#a6e22e">newCondition</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> Condition notEmpty <span style="color:#f92672">=</span> lock.<span style="color:#a6e22e">newCondition</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResourcePool</span>(<span style="color:#66d9ef">int</span> capacity) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">capacity</span> <span style="color:#f92672">=</span> capacity;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">produce</span>(Object resource) {
</span></span><span style="display:flex;"><span>        lock.<span style="color:#a6e22e">lock</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> (resources.<span style="color:#a6e22e">size</span>() <span style="color:#f92672">&gt;=</span> capacity) {
</span></span><span style="display:flex;"><span>                notFull.<span style="color:#a6e22e">await</span>(); <span style="color:#75715e">// 如果资源池已满，生产者等待</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            resources.<span style="color:#a6e22e">add</span>(resource);
</span></span><span style="display:flex;"><span>            System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;生产者: 生产了一个资源, 当前资源数: &#34;</span> <span style="color:#f92672">+</span> resources.<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>            notEmpty.<span style="color:#a6e22e">signal</span>(); <span style="color:#75715e">// 唤醒单个等待的消费者线程</span>
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>            e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">finally</span> {
</span></span><span style="display:flex;"><span>            lock.<span style="color:#a6e22e">unlock</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Object <span style="color:#a6e22e">consume</span>() {
</span></span><span style="display:flex;"><span>        lock.<span style="color:#a6e22e">lock</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">while</span> (resources.<span style="color:#a6e22e">isEmpty</span>()) {
</span></span><span style="display:flex;"><span>                notEmpty.<span style="color:#a6e22e">await</span>(); <span style="color:#75715e">// 如果资源池为空，消费者等待</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            Object resource <span style="color:#f92672">=</span> resources.<span style="color:#a6e22e">remove</span>();
</span></span><span style="display:flex;"><span>            System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;消费者: 消费了一个资源, 当前资源数: &#34;</span> <span style="color:#f92672">+</span> resources.<span style="color:#a6e22e">size</span>());
</span></span><span style="display:flex;"><span>            notFull.<span style="color:#a6e22e">signal</span>(); <span style="color:#75715e">// 唤醒单个等待的生产者线程</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> resource;
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>            e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">finally</span> {
</span></span><span style="display:flex;"><span>            lock.<span style="color:#a6e22e">unlock</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>        ResourcePool pool <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ResourcePool(3);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 生产者线程</span>
</span></span><span style="display:flex;"><span>        Thread producer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 5; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                pool.<span style="color:#a6e22e">produce</span>(<span style="color:#66d9ef">new</span> Object());
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                    Thread.<span style="color:#a6e22e">sleep</span>(1000);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 消费者线程1</span>
</span></span><span style="display:flex;"><span>        Thread consumer1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 5; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                pool.<span style="color:#a6e22e">consume</span>();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                    Thread.<span style="color:#a6e22e">sleep</span>(1000);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 消费者线程2</span>
</span></span><span style="display:flex;"><span>        Thread consumer2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 5; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                pool.<span style="color:#a6e22e">consume</span>();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                    Thread.<span style="color:#a6e22e">sleep</span>(1000);
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>                    e.<span style="color:#a6e22e">printStackTrace</span>();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        producer.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>        consumer1.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>        consumer2.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="改造后的代码解释">改造后的代码解释</h3>
<ol>
<li>
<p><strong>锁的初始化</strong>：</p>
<ul>
<li>使用<code>ReentrantLock</code>代替<code>synchronized</code>，提供更灵活的锁控制。</li>
</ul>
</li>
<li>
<p><strong>条件的初始化</strong>：</p>
<ul>
<li>为生产者和消费者分别创建两个<code>Condition</code>实例<code>notFull</code>和<code>notEmpty</code>，分别用于等待资源池满和空的条件。</li>
</ul>
</li>
<li>
<p><strong>生产者方法</strong>：</p>
<ul>
<li>在资源池满时，生产者线程调用<code>notFull.await()</code>进入等待。</li>
<li>当资源池有空间时，调用<code>notEmpty.signal()</code>唤醒单个消费者线程。</li>
</ul>
</li>
<li>
<p><strong>消费者方法</strong>：</p>
<ul>
<li>在资源池空时，消费者线程调用<code>notEmpty.await()</code>进入等待。</li>
<li>当资源池有资源时，调用<code>notFull.signal()</code>唤醒单个生产者线程。</li>
</ul>
</li>
</ol>
<p>通过这种改造，我们使用<code>ReentrantLock</code>和<code>Condition</code>实现了更灵活的线程同步，避免了<code>synchronized</code>的一些限制。</p>
]]></content:encoded>
    </item>
    <item>
      <title>[BUAA-OO] Unit 1 递归函数调用的解析与计算</title>
      <link>https://oNya685.github.io/posts/buaa/oo/unit-1/homework-2-function/</link>
      <pubDate>Wed, 05 Mar 2025 20:48:35 +0000</pubDate>
      <guid>https://oNya685.github.io/posts/buaa/oo/unit-1/homework-2-function/</guid>
      <description>&lt;h1 id=&#34;函数调用处理机制&#34;&gt;函数调用处理机制&lt;/h1&gt;
&lt;h2 id=&#34;核心思路&#34;&gt;核心思路&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;实参与形参分离&lt;/strong&gt;：通过&lt;code&gt;assignment&lt;/code&gt;哈希表实现参数映射，实现&lt;strong&gt;形参&lt;/strong&gt;（函数定义时的参数名）与&lt;strong&gt;相对实参&lt;/strong&gt;（调用时传入的具体因子）的对应关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;递归替换&lt;/strong&gt;：通过&lt;code&gt;assign&lt;/code&gt;方法逐层展开函数调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;终止条件&lt;/strong&gt;：当递归到&lt;strong&gt;初始定义&lt;/strong&gt;表达式时完成解析&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;关键实现步骤&#34;&gt;关键实现步骤&lt;/h2&gt;
&lt;h3 id=&#34;数据结构&#34;&gt;数据结构&lt;/h3&gt;
&lt;p&gt;为函数调用因子引入通过&lt;code&gt;HashMap&amp;lt;String, Factor&amp;gt;&lt;/code&gt;实现的新成员变量&lt;code&gt;assignment&lt;/code&gt;，并在为语素实现的&lt;code&gt;assign&lt;/code&gt;方法中作为传入参数。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="函数调用处理机制">函数调用处理机制</h1>
<h2 id="核心思路">核心思路</h2>
<ol>
<li><strong>实参与形参分离</strong>：通过<code>assignment</code>哈希表实现参数映射，实现<strong>形参</strong>（函数定义时的参数名）与<strong>相对实参</strong>（调用时传入的具体因子）的对应关系。</li>
<li><strong>递归替换</strong>：通过<code>assign</code>方法逐层展开函数调用</li>
<li><strong>终止条件</strong>：当递归到<strong>初始定义</strong>表达式时完成解析</li>
</ol>
<h2 id="关键实现步骤">关键实现步骤</h2>
<h3 id="数据结构">数据结构</h3>
<p>为函数调用因子引入通过<code>HashMap&lt;String, Factor&gt;</code>实现的新成员变量<code>assignment</code>，并在为语素实现的<code>assign</code>方法中作为传入参数。</p>
<p>对于<code>FuncCall</code>因子，引入<code>Integer index</code>，<code>FuncDefine</code>，<code>ArrayList&lt;Factor&gt;</code>，用于实现对Expr中的FuncCall因子的完全解析。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FuncCall</span> <span style="color:#66d9ef">extends</span> VarFactor {
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ConstantFactor index;  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> FuncDefine define;  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> HashMap<span style="color:#f92672">&lt;</span>BaseVar, Factor<span style="color:#f92672">&gt;</span> assignment; <span style="color:#75715e">// 实际参数列表</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="处理流程">处理流程</h3>
<p>通过<code>expr = expr.assign(null)</code>中调用<code>funcCall.define.get(index).assign(assignment).assign(null)</code>，因除<code>FuncCall</code>以外的其他语素有其<code>assign</code>方法，所以将不断递归下降直到<code>funcCall.define.get(1)</code>和<code>funcCall.define.get(0)</code>。此时再递归向下将不再出现<code>FuncCall</code>类，递归结束并逐级返回。从而实现的<code>Expr</code>的去<code>FuncCall</code>流程，以便进行<code>toPoly</code>和<code>simplify</code>。</p>
<ol>
<li>
<p><strong>初始化调用</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>expr <span style="color:#f92672">=</span> expr.<span style="color:#a6e22e">assign</span>(<span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 通过expr.assign(null)启动替换链条，null参数表示要解析的最上层表达式中的参数为绝对实参</span>
</span></span></code></pre></div></li>
<li>
<p><strong>参数替换机制</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// FuncCall.java</span>
</span></span><span style="display:flex;"><span>ExprFactor <span style="color:#a6e22e">assign</span>(HashMap<span style="color:#f92672">&lt;</span>String, Factor<span style="color:#f92672">&gt;</span> assignment) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">define</span>.<span style="color:#a6e22e">get</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">index</span>)
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">assign</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">assignment</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 先应用this.assignment当前层的参数绑定</span>
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">assign</span>(assignment);
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 再应用外层传入的assignment参数，实现参数作用域的嵌套覆盖</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p><strong>递归展开过程</strong></p>
<pre tabindex="0"><code>// 高层调用 → 中间层展开 → 基础层解析
funcCall.assign(null)
→ funcCall.define.get(index).assign(assignment).assign(null)
→ ...
→ funcCall&#39;.define.get(index&#39;).assign(assignment&#39;).assign(assignment).assign(null)
→ ...
→ funcCall&#39;&#39;.define.get(index&#39;&#39;).assign(assignment&#39;&#39;).assign(assignment&#39;).assign(assignment).assign(null)
→ ...
→ funcCall.define.get(0 | 1).assign... // 初始定义表达式
</code></pre></li>
</ol>
<h3 id="类方法实现">类方法实现</h3>
<p>经<code>assign</code>方法，<code>BaseVar.assign(assignment)</code>返回<code>Factor</code>，<code>PowerFunc.assign(assignment)</code>返回<code>ExprFactor</code>，<code>FuncCall</code>递归调用<code>(Expr)define.get(this.index).assign(this.assignment).assign(assignment)</code>返回<code>ExprFactor</code>，其他语素的<code>assign</code>方法返回同类对象。最终递归返回不含<code>FuncCall</code>的纯<code>Expr</code>，即可施之<code>toPoly</code>方法。</p>
<table>
  <thead>
      <tr>
          <th>类名</th>
          <th>assign方法行为</th>
          <th>返回类型</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>BaseVar</td>
          <td>直接返回对应的含相对实参的Factor</td>
          <td>Factor</td>
      </tr>
      <tr>
          <td>PowerFunc</td>
          <td>返回参数赋值的ExprFactor</td>
          <td>ExprFactor</td>
      </tr>
      <tr>
          <td>FuncCall</td>
          <td>递归调用下层定义进行参数替换</td>
          <td>ExprFactor</td>
      </tr>
      <tr>
          <td>其他因子</td>
          <td>返回由自身组成语素.assign()构造的同类对象</td>
          <td>同类对象</td>
      </tr>
  </tbody>
</table>
<h2 id="处理终点">处理终点</h2>
<p>当递归到<code>define.get(0 | 1)</code>时：</p>
<ol>
<li>不再包含FuncCall对象，函数调用结构完全消解</li>
<li>所有形参已被实际参数替换</li>
<li>表达式完全展开为基本元素</li>
<li>可安全调用<code>toPoly()</code>进行多项式转换</li>
<li>可进行最终化简<code>simplify()</code></li>
</ol>
]]></content:encoded>
    </item>
  </channel>
</rss>
