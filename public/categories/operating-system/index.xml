<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Operating System on oNya&#39;s Blog</title>
    <link>https://oNya685.github.io/categories/operating-system/</link>
    <description>Recent content in Operating System on oNya&#39;s Blog</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 16 Mar 2025 11:19:17 +0800</lastBuildDate>
    <atom:link href="https://oNya685.github.io/categories/operating-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[BUAA-OS] 理论作业 1</title>
      <link>https://oNya685.github.io/posts/buaa/os/homework-1/</link>
      <pubDate>Sun, 16 Mar 2025 11:19:17 +0800</pubDate>
      <guid>https://oNya685.github.io/posts/buaa/os/homework-1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;%E4%BD%9C%E4%B8%9A1.pdf&#34;&gt;点此查看作业源文件&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;1-什么是多道程序设计多道程序设计与分时系统的区别是什么&#34;&gt;1. 什么是多道程序设计？多道程序设计与分时系统的区别是什么？&lt;/h1&gt;
&lt;p&gt;多道程序设计技术，是指允许多个程序同时进⼊内存并运⾏。即同时把多个程序放⼊内存中，并允许它们交替在 CPU 中运⾏，共享系统中的各种硬、软件资源，当⼀道程序因 I/O 请求⽽暂停运⾏时，CPU 便⽴即转去运⾏另⼀道程序。多道程序设计技术提⾼了 CPU、I/O 设备和内存的利⽤率，从⽽提⾼了整个系统的资源利⽤率和系统吞吐量，最终提⾼了整个系统的效率。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong><a href="%E4%BD%9C%E4%B8%9A1.pdf">点此查看作业源文件</a></strong></p>
<h1 id="1-什么是多道程序设计多道程序设计与分时系统的区别是什么">1. 什么是多道程序设计？多道程序设计与分时系统的区别是什么？</h1>
<p>多道程序设计技术，是指允许多个程序同时进⼊内存并运⾏。即同时把多个程序放⼊内存中，并允许它们交替在 CPU 中运⾏，共享系统中的各种硬、软件资源，当⼀道程序因 I/O 请求⽽暂停运⾏时，CPU 便⽴即转去运⾏另⼀道程序。多道程序设计技术提⾼了 CPU、I/O 设备和内存的利⽤率，从⽽提⾼了整个系统的资源利⽤率和系统吞吐量，最终提⾼了整个系统的效率。</p>
<p>多道程序设计与分时系统的区别在于：多道程序设计主要关注的是如何让多个程序在内存中同时存在并交替执⾏，以提⾼资源利⽤率。分时系统则是在多道程序设计的基础上进⼀步发展，它不仅允许多个程序并发执⾏，还通过时间⽚轮转的⽅式为每个⽤户分配 CPU 时间，使得多个⽤户可以⼏乎同时使⽤计算机，提供交互式服务。</p>
<h1 id="2-什么原因推动了操作系统从批处理发展到多道程序进而发展到分时系统">2. 什么原因推动了操作系统从批处理发展到多道程序，进而发展到分时系统？</h1>
<p>批处理系统的运⾏效率被低速 I/O 设备限制，CPU 空闲时间多，利⽤率低，因此发展出多道程序系统；</p>
<p>多道程序系统平均周转时间⻓，不能提供交互作⽤能⼒，因此发展出允许多个⽤户共享计算机，多个程序分时共享硬、软件资源的分时系统。</p>
<h1 id="3-什么是陷阱与中断的区别是什么什么是系统调用">3. 什么是陷阱？与中断的区别是什么？什么是系统调用？</h1>
<p>陷阱是⼀种同步异常，是程序内部有意设置的某⼀特定指令执⾏的结果，例如系统调⽤。陷阱是程序执⾏过程中预期的⾏为，可以复现，⽤于请求操作系统提供服务等。</p>
<p>中断是⼀种异步异常，通常由外部事件（I/O 设备、处理器时钟或定时器）触发，与处理器正在执⾏的内容⽆关。中断是不可预测的，⽤于处理外部事件。</p>
<p>系统调⽤是⽤户程序与操作系统内核之间的接⼝，允许⽤户程序请求操作系统提供的服务。系统调⽤本质上是⼀种同步异常，或陷阱，⽤于安全地进⼊内核模式并执⾏特权操作。</p>
<h1 id="4-判断可移植的操作系统可以从一个系统架构移植到另外一个系统架构而无需修改">4. 判断：可移植的操作系统可以从一个系统架构移植到另外一个系统架构而无需修改。</h1>
<p>错误。不同系统架构之间存在指令集差异、内存管理方式不同、硬件寄存器配置不一致等根本性区别，操作系统必须针对这些硬件特性进行调整。</p>
<h2 id="1-请解释为什么构建完全可移植的-os-是不可能的">(1) 请解释为什么构建完全可移植的 OS 是不可能的？</h2>
<p>不同硬件架构的指令集、总线设计和CPU字长等存在差异，操作系统必须依赖硬件相关代码，⽆法完全通⽤。</p>
<h2 id="2-如果需要你设计一个高度可移植的-os那么请描述你需要设计的两个层次">(2) 如果需要你设计一个高度可移植的 OS，那么请描述你需要设计的两个层次？</h2>
<p>高度可移植的操作系统由机器相关层和机器无关层组成。机器无关层只需实现一次即可。</p>
<p>机器相关层处理硬件的具体特性，必须针对每个架构单独实现。该层为机器无关层提供统一的接口。为实现高度可移植性，机器相关层的规模应尽可能最小化。</p>
<h1 id="5-在设计操作系统时一些设计指标是相互矛盾的例如资源利用率吞吐量-处理时间健壮性等请给出一对相互矛盾的设计实例">5. 在设计操作系统时，一些设计指标是相互矛盾的，例如资源利用率、吞吐量、 处理时间、健壮性等。请给出一对相互矛盾的设计实例。</h1>
<p>资源利⽤率与响应时间。</p>
<p>资源利⽤率⾼意味着尽可能多地利⽤系统资源，但可能导致频繁的切换和复杂的调度策略，从⽽增加响应时间。响应时间短要求操作系统能够快速响应⽤户请求， 可能保留更多的资源⽤于即时响应，导致资源利⽤率下降。</p>
<h1 id="6-一个计算机系统有输入机一台打印机两台现有二道程序同时投入运行且程序-a-先开始运行程序-b-后运行程序-a-的运行轨迹为计算-50ms打印信息-100ms再计算-50ms打印信息-100ms结束程序-b-运行的轨迹为计算-50ms输入数据-80ms再计算-100ms结束要求">6. 一个计算机系统有输入机一台、打印机两台，现有二道程序同时投入运行，且程序 A 先开始运行，程序 B 后运行。程序 A 的运行轨迹为：计算 50ms，打印信息 100ms，再计算 50ms，打印信息 100ms，结束。程序 B 运行的轨迹为：计算 50ms，输入数据 80ms，再计算 100ms，结束。要求：</h1>
<h2 id="1-用图画出这二道程序并发执行时的工作情况">(1) 用图画出这二道程序并发执行时的工作情况。</h2>
<p><div class="post-img-view">
    <a data-fancybox="gallery"
         href="Pasted%20image%2020250316112252.png">
        <img loading="lazy" src="/posts/buaa/os/homework-1/Pasted%20image%2020250316112252_hu_714830f66a53f33c.webp">
    </a>
</div></p>
<h2 id="2-说明在二道程序运行时cpu-有无空闲等待若有在哪段时间内等待为什么会空闲等待">(2) 说明在二道程序运行时，CPU 有无空闲等待？若有，在哪段时间内等待？为什么会空闲等待？</h2>
<p>有。在 100ms~150ms，程序 A 在打印信息，程序 B 在输入数据，故 CPU 处于空闲等待。</p>
<h2 id="3-程序-ab-运行时有无等待现象在什么时候会发生等待现象">(3) 程序 A、B 运行时有无等待现象？在什么时候会发生等待现象？</h2>
<p>程序 A 没有，程序 B 有。</p>
<p>在 180ms~200ms，程序 B 完成了输入数据，在等待 CPU 空闲，而程序 A 占用了处理器，正在进行计算，故程序 B 等待了 20ms。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
